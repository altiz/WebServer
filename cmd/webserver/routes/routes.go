package routes

import (
	_ "WebServer/cmd/webserver/docs" // docs is generated by Swag CLI, you have to import it.
	"WebServer/cmd/webserver/models"
	_ "WebServer/cmd/webserver/models"
	"net/http"

	"github.com/gin-gonic/gin"
	logs "github.com/sirupsen/logrus" // swagger embed files
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// indexPage godoc
// @Summary Retrieves user based on given ID
// @Produce html
// @Success 200 {body} ok
// @Router / [get]
func indexPage(c *gin.Context) {
	c.String(http.StatusOK, "ok")

}

// testJSON godoc
// @Summary Retrieves user based on given ID
// @Description получить строку по идентификатору
// @Accept  json
// @Produce json
// Param [param_name] [param_type] [data_type] [required/mandatory] [description]
// @Param q body models.Data_req false "name search by q"
// @Success 200 {object} models.Data_resp
// @Router /test/ [post]
func testJSON(c *gin.Context) {

	var json models.Data_req
	var resp models.Data_resp
	if err := c.ShouldBindJSON(&json); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	if json.User == "test" {
		logs.WithFields(logs.Fields{
			"Status": 0,
		}).Info("Ok")
		resp.Status = 0
		c.JSON(http.StatusOK, resp)
	} else {
		logs.WithFields(logs.Fields{
			"User": json.User,
		}).Info("Ok")
		resp.Status = 0
		c.JSON(http.StatusOK, resp)
	}

}

func InitializeRoutes(router *gin.Engine) {

	url := ginSwagger.URL("http://localhost:5000/swagger/doc.json") // The url pointing to API definition
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))

	api := router.Group("/api")
	version1 := api.Group("/v1")

	version1.POST("/test", testJSON)
	version1.GET("/", indexPage)
}
